/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    'package-categories': PackageCategory;
    destinations: Destination;
    packages: Package;
    'accommodation-types': AccommodationType;
    activities: Activity;
    amenities: Amenity;
    bookings: Booking;
    'bulk-booking-requests': BulkBookingRequest;
    cities: City;
    'custom-trip-requests': CustomTripRequest;
    exclusions: Exclusion;
    favorites: Favorite;
    inclusions: Inclusion;
    'marketing-banners': MarketingBanner;
    places: Place;
    promotions: Promotion;
    regions: Region;
    reviews: Review;
    'social-posts': SocialPost;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'package-categories': PackageCategoriesSelect<false> | PackageCategoriesSelect<true>;
    destinations: DestinationsSelect<false> | DestinationsSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    'accommodation-types': AccommodationTypesSelect<false> | AccommodationTypesSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    amenities: AmenitiesSelect<false> | AmenitiesSelect<true>;
    bookings: BookingsSelect<false> | BookingsSelect<true>;
    'bulk-booking-requests': BulkBookingRequestsSelect<false> | BulkBookingRequestsSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    'custom-trip-requests': CustomTripRequestsSelect<false> | CustomTripRequestsSelect<true>;
    exclusions: ExclusionsSelect<false> | ExclusionsSelect<true>;
    favorites: FavoritesSelect<false> | FavoritesSelect<true>;
    inclusions: InclusionsSelect<false> | InclusionsSelect<true>;
    'marketing-banners': MarketingBannersSelect<false> | MarketingBannersSelect<true>;
    places: PlacesSelect<false> | PlacesSelect<true>;
    promotions: PromotionsSelect<false> | PromotionsSelect<true>;
    regions: RegionsSelect<false> | RegionsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    'social-posts': SocialPostsSelect<false> | SocialPostsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    'search-filters': SearchFilter;
    packageLayout: PackageLayout;
    destinationLayout: DestinationLayout;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'search-filters': SearchFiltersSelect<false> | SearchFiltersSelect<true>;
    packageLayout: PackageLayoutSelect<false> | PackageLayoutSelect<true>;
    destinationLayout: DestinationLayoutSelect<false> | DestinationLayoutSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide.
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with a transparent background. This will be layered at the bottom.
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds (e.g., 8000 = 8 seconds).
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds.
       */
      transitionDuration?: number | null;
      destinationOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      categoryOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    destinationHeroFields?: {
      /**
       * The main heading displayed on the hero
       */
      destination: string;
      cities: {
        name: string;
        /**
         * High-resolution image for the city background
         */
        image: string | Media;
        id?: string | null;
      }[];
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    packageHeroFields?: {
      /**
       * Rating out of 5 stars
       */
      rating: number;
      /**
       * Location itinerary description
       */
      location: string;
      /**
       * Detailed description of the travel package
       */
      description: string;
      vacationTypes: {
        /**
         * Type name (e.g., Couples, Family)
         */
        type: string;
        /**
         * Descriptive label for the vacation type
         */
        label: string;
        /**
         * Emoji icon for the vacation type
         */
        icon: string;
        /**
         * Percentage value (0-100)
         */
        percentage: number;
        id?: string | null;
      }[];
      pricing: {
        /**
         * Original price (formatted with commas)
         */
        originalPrice: string;
        /**
         * Discounted price (formatted with commas)
         */
        discountedPrice: string;
        /**
         * Currency symbol
         */
        currency?: string | null;
      };
      /**
       * Number of bookings (e.g., 250+)
       */
      bookingCount: string;
      /**
       * Profile images of recent customers
       */
      recentBookings?:
        | {
            avatar: string | Media;
            id?: string | null;
          }[]
        | null;
      /**
       * The main promotional image for the package
       */
      mainImage: string | Media;
      /**
       * Background image for the card
       */
      backgroundImage: string | Media;
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title for the hero section
         */
        title: string;
        stops?:
          | {
              /**
               * Name of the attraction (e.g., Park Güell)
               */
              name: string;
              /**
               * City where the attraction is located
               */
              city: string;
              /**
               * Hero image for the attraction
               */
              image: string | Media;
              /**
               * Short description of the attraction
               */
              excerpt: string;
              /**
               * URL slug for the attraction page (optional)
               */
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        displaySettings?: {
          /**
           * Scale up the centered card
           */
          showActiveScale?: boolean | null;
          /**
           * Number of cards visible at once
           */
          visibleWindow?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | ImageGridBlock
    | TravelPackageExplorerBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  type: 'experience' | 'trip_type' | 'vibe' | 'destination_label';
  description?: string | null;
  /**
   * Optional parent category for hierarchy
   */
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'customer' | 'agent' | 'admin';
  phone?: string | null;
  marketingOptIn?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScrollerBlock".
 */
export interface DynamicScrollerBlock {
  sections?:
    | {
        id?: string | null;
        type: 'package' | 'itinerary';
        title?: string | null;
        subtitle?: string | null;
        theme?: {
          background?: string | null;
          headerAccent?: string | null;
          titleColor?: string | null;
          subtitleColor?: string | null;
        };
        navigation?: {
          position?: ('bottom-left' | 'bottom-center' | 'bottom-right') | null;
        };
        items?: (DynamicScroller_PackageItem | DynamicScroller_ItineraryDay)[] | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'dynamicScroller';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_PackageItem".
 */
export interface DynamicScroller_PackageItem {
  id?: string | null;
  title: string;
  price: string;
  image: string | Media;
  tag?: string | null;
  tagColor?: string | null;
  blockName?: string | null;
  blockType: 'packageItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_ItineraryDay".
 */
export interface DynamicScroller_ItineraryDay {
  day: string;
  activities?:
    | {
        icon?: (string | null) | Media;
        description: string;
        detailsImage?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'itineraryDay';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopularNowBlock".
 */
export interface PopularNowBlock {
  heading?: string | null;
  subheading?: string | null;
  pauseOnHover?: boolean | null;
  rows: {
    /**
     * Scroll direction for this row.
     */
    direction?: ('left' | 'right') | null;
    /**
     * How many seconds should a full loop take?
     */
    speedSeconds?: number | null;
    cards: {
      name: string;
      price: string;
      image?: (string | null) | Media;
      /**
       * Optional external image URL.
       */
      imageUrl?: string | null;
      /**
       * Image alt text.
       */
      alt?: string | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'popularNow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations".
 */
export interface Destination {
  id: string;
  name: string;
  summary?: string | null;
  heroImage?: (string | null) | Media;
  startingFromPricePerPerson?: number | null;
  /**
   * Destination label chips like Popular / In Season / Featured
   */
  labels?: (string | Category)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UpDownCardCarouselBlock".
 */
export interface UpDownCardCarouselBlock {
  heading?: string | null;
  /**
   * Optional tagline shown under the heading.
   */
  subheading?: string | null;
  cards: {
    name: string;
    details?: string | null;
    /**
     * Price in INR.
     */
    price: number;
    discount?: string | null;
    /**
     * Select from Media collection.
     */
    image?: (string | null) | Media;
    /**
     * Optional external image URL.
     */
    imageUrl?: string | null;
    /**
     * Image alt text.
     */
    alt?: string | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'upDownCardCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientStoriesBlock".
 */
export interface ClientStoriesBlock {
  heading?: string | null;
  subheading?: string | null;
  buttonText?: string | null;
  background?: (string | null) | Media;
  /**
   * Optional external image URL.
   */
  backgroundUrl?: string | null;
  /**
   * Decorative overlay image placed behind cards.
   */
  overlay?: (string | null) | Media;
  /**
   * How many cards are visible at once.
   */
  cardsPerView?: number | null;
  gapPx?: number | null;
  cards: {
    name: string;
    rating: number;
    story: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'clientStories';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstagramCarouselBlock".
 */
export interface InstagramCarouselBlock {
  /**
   * E.g., "Latest on Instagram"
   */
  heading?: string | null;
  /**
   * Optional header with a follow button
   */
  profile?: {
    handle?: string | null;
    profileUrl?: string | null;
    followLabel?: string | null;
  };
  layout?: {
    columnsDesktop?: number | null;
    columnsTablet?: number | null;
    columnsMobile?: number | null;
    gutter?: string | null;
    showCaptions?: boolean | null;
  };
  posts: {
    url: string;
    /**
     * Force captions for this post only
     */
    captioned?: boolean | null;
    id?: string | null;
  }[];
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'instagramCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGridBlock".
 */
export interface ImageGridBlock {
  leftHero?: {
    title?: string | null;
    rating?: number | null;
    trail?: string | null;
    image?: (string | null) | Media;
    imageUrl?: string | null;
    alt?: string | null;
  };
  explore?: {
    subtitle?: string | null;
    title?: string | null;
    description?: string | null;
    button?: {
      label?: string | null;
      href?: string | null;
    };
  };
  spots?:
    | {
        name?: string | null;
        rating?: number | null;
        location?: string | null;
        image?: (string | null) | Media;
        imageUrl?: string | null;
        alt?: string | null;
        id?: string | null;
      }[]
    | null;
  activities?: {
    subtitle?: string | null;
    title?: string | null;
    description?: string | null;
    button?: {
      label?: string | null;
      href?: string | null;
    };
    tag?: string | null;
    image?: (string | null) | Media;
    imageUrl?: string | null;
    alt?: string | null;
  };
  /**
   * Optional symbols or labels so even icons/markers can be editor-controlled.
   */
  labels?: {
    ratingPrefix?: string | null;
  };
  theme?: {
    dark?: boolean | null;
    container?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelPackageExplorerBlock".
 */
export interface TravelPackageExplorerBlock {
  packages: {
    /**
     * Package title (e.g., "Spanish Escape")
     */
    title: string;
    /**
     * Location details (e.g., "Madrid 2N, Granada 1N, Valencia 1N, Ibiza 2N")
     */
    location: string;
    /**
     * Rating (1-5 stars)
     */
    rating: number;
    /**
     * Number of reviews
     */
    reviews: number;
    /**
     * Package description
     */
    description: string;
    /**
     * Current price in ₹
     */
    price: number;
    /**
     * Original price (for showing discount)
     */
    originalPrice: number;
    /**
     * Duration in days
     */
    duration: number;
    /**
     * Types of experiences offered
     */
    experiences: ('Adventure' | 'Relaxing' | 'Cultural' | 'Sightseeing' | 'Party')[];
    accommodationType: 'Hotel' | 'Resort' | 'Boutique Hotel' | 'Villa / Townhouse';
    /**
     * Amenities included
     */
    amenities: (
      | 'Free Wifi'
      | 'Swimming Pool'
      | 'Breakfast Included'
      | 'Gym'
      | 'Airport Transfer'
      | 'City View'
      | 'Private Pool'
      | 'Beach Access'
    )[];
    province: 'Madrid' | 'Andalusia' | 'Catalonia' | 'Balearic Islands';
    /**
     * Upload package image
     */
    image?: (string | null) | Media;
    /**
     * Or provide external image URL
     */
    imageUrl?: string | null;
    /**
     * What is included in the package
     */
    inclusions: (
      | 'Flights'
      | 'Stay'
      | 'Cruise tickets'
      | 'Transfers'
      | 'Breakfast'
      | 'Tour guide'
      | 'City Tour Pass'
      | 'Ferry Tickets'
      | 'Club Access'
      | 'Villa Stay'
    )[];
    suitability: {
      /**
       * Suitability percentage for couples (0-100)
       */
      couples: number;
      /**
       * Suitability percentage for families (0-100)
       */
      family: number;
    };
    /**
     * Number of recent bookings to display
     */
    recentBookings: number;
    /**
     * Key sights and attractions included in the package
     */
    sights: {
      /**
       * Sight or attraction name
       */
      name: string;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'travelPackageExplorer';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories".
 */
export interface PackageCategory {
  id: string;
  name: string;
  type: 'experience' | 'trip_type' | 'vibe' | 'destination_label';
  /**
   * Optional parent category
   */
  parent?: (string | null) | PackageCategory;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  name: string;
  /**
   * URL-friendly identifier for the package
   */
  slug: string;
  tagline?: string | null;
  summary?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  rating?: number | null;
  stars?: number | null;
  isFeatured?: boolean | null;
  isFamilyFriendly?: boolean | null;
  bookingsCount30d?: number | null;
  minPricePerPerson?: number | null;
  currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
  durationDays: number;
  coverImage?: (string | null) | Media;
  route?:
    | {
        city: string | City;
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  itinerary?:
    | {
        dayNumber: number;
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        mealsIncluded?: {
          breakfast?: boolean | null;
          lunch?: boolean | null;
          dinner?: boolean | null;
        };
        image?: (string | null) | Media;
        places?: (string | Place)[] | null;
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  highlights?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  goodToKnow?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  prices?:
    | {
        roomOccupancy: 'single' | 'double' | 'triple';
        pricePerPerson: number;
        currency: 'INR' | 'USD' | 'EUR' | 'GBP';
        validFrom?: string | null;
        validTo?: string | null;
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  categories?: (string | PackageCategory)[] | null;
  activities?: (string | Activity)[] | null;
  amenities?: (string | Amenity)[] | null;
  accommodationTypes?: (string | AccommodationType)[] | null;
  inclusions?: (string | Inclusion)[] | null;
  exclusions?: (string | Exclusion)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: string;
  name: string;
  destination: string | Destination;
  regions?: (string | null) | Region;
  latitude?: number | null;
  longitude?: number | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
  id: string;
  name: string;
  destination: string | Destination;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places".
 */
export interface Place {
  id: string;
  name: string;
  city: string | City;
  type: 'attraction' | 'museum' | 'monument' | 'park' | 'other';
  description?: string | null;
  address?: string | null;
  latitude?: number | null;
  longitude?: number | null;
  image?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: string;
  name: string;
  type: 'adventure' | 'leisure' | 'cultural' | 'other';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities".
 */
export interface Amenity {
  id: string;
  name: string;
  type: 'logistic' | 'accessibility' | 'accommodation' | 'other';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodation-types".
 */
export interface AccommodationType {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inclusions".
 */
export interface Inclusion {
  id: string;
  code: string;
  name: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exclusions".
 */
export interface Exclusion {
  id: string;
  code: string;
  name: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings".
 */
export interface Booking {
  id: string;
  user: string | User;
  package: string | Package;
  startDate?: string | null;
  endDate?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bulk-booking-requests".
 */
export interface BulkBookingRequest {
  id: string;
  contactName: string;
  email: string;
  phone?: string | null;
  organization?: string | null;
  destination?: (string | null) | Destination;
  desiredStartDate?: string | null;
  desiredEndDate?: string | null;
  numPeople: number;
  message?: string | null;
  status?: ('new' | 'contacted' | 'closed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "custom-trip-requests".
 */
export interface CustomTripRequest {
  id: string;
  user?: (string | null) | User;
  destination?: (string | null) | Destination;
  budgetMin?: number | null;
  budgetMax?: number | null;
  numPeople: number;
  startDate?: string | null;
  endDate?: string | null;
  preferences?: string | null;
  source?: ('curate' | 'plan_my_trip') | null;
  status?: ('new' | 'in_progress' | 'quoted' | 'closed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favorites".
 */
export interface Favorite {
  id: string;
  user: string | User;
  target:
    | {
        relationTo: 'packages';
        value: string | Package;
      }
    | {
        relationTo: 'destinations';
        value: string | Destination;
      }
    | {
        relationTo: 'places';
        value: string | Place;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketing-banners".
 */
export interface MarketingBanner {
  id: string;
  title: string;
  subtitle?: string | null;
  percentageOff?: number | null;
  image?: (string | null) | Media;
  ctaText?: string | null;
  ctaTarget?: ('package' | 'destination' | 'category' | 'url') | null;
  ctaRef?:
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'destinations';
        value: string | Destination;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null);
  ctaUrl?: string | null;
  sortOrder?: number | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions".
 */
export interface Promotion {
  id: string;
  name: string;
  description?: string | null;
  discountType: 'percent' | 'amount';
  discountValue: number;
  maxDiscountAmount?: number | null;
  startsAt?: string | null;
  endsAt?: string | null;
  isActive?: boolean | null;
  bannerImage?: (string | null) | Media;
  packages?: (string | Package)[] | null;
  categories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  user: string | User;
  package?: (string | null) | Package;
  destination?: (string | null) | Destination;
  rating: number;
  title?: string | null;
  body?: string | null;
  photos?:
    | {
        image?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  published?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-posts".
 */
export interface SocialPost {
  id: string;
  platform: 'instagram';
  handle?: string | null;
  externalId?: string | null;
  caption?: string | null;
  image?: (string | null) | Media;
  postedAt?: string | null;
  isPinned?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'package-categories';
        value: string | PackageCategory;
      } | null)
    | ({
        relationTo: 'destinations';
        value: string | Destination;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'accommodation-types';
        value: string | AccommodationType;
      } | null)
    | ({
        relationTo: 'activities';
        value: string | Activity;
      } | null)
    | ({
        relationTo: 'amenities';
        value: string | Amenity;
      } | null)
    | ({
        relationTo: 'bookings';
        value: string | Booking;
      } | null)
    | ({
        relationTo: 'bulk-booking-requests';
        value: string | BulkBookingRequest;
      } | null)
    | ({
        relationTo: 'cities';
        value: string | City;
      } | null)
    | ({
        relationTo: 'custom-trip-requests';
        value: string | CustomTripRequest;
      } | null)
    | ({
        relationTo: 'exclusions';
        value: string | Exclusion;
      } | null)
    | ({
        relationTo: 'favorites';
        value: string | Favorite;
      } | null)
    | ({
        relationTo: 'inclusions';
        value: string | Inclusion;
      } | null)
    | ({
        relationTo: 'marketing-banners';
        value: string | MarketingBanner;
      } | null)
    | ({
        relationTo: 'places';
        value: string | Place;
      } | null)
    | ({
        relationTo: 'promotions';
        value: string | Promotion;
      } | null)
    | ({
        relationTo: 'regions';
        value: string | Region;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'social-posts';
        value: string | SocialPost;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              categoryOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              destination?: T;
              cities?:
                | T
                | {
                    name?: T;
                    image?: T;
                    id?: T;
                  };
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              rating?: T;
              location?: T;
              description?: T;
              vacationTypes?:
                | T
                | {
                    type?: T;
                    label?: T;
                    icon?: T;
                    percentage?: T;
                    id?: T;
                  };
              pricing?:
                | T
                | {
                    originalPrice?: T;
                    discountedPrice?: T;
                    currency?: T;
                  };
              bookingCount?: T;
              recentBookings?:
                | T
                | {
                    avatar?: T;
                    id?: T;
                  };
              mainImage?: T;
              backgroundImage?: T;
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              displaySettings?:
                | T
                | {
                    showActiveScale?: T;
                    visibleWindow?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        imageGrid?: T | ImageGridBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScrollerBlock_select".
 */
export interface DynamicScrollerBlockSelect<T extends boolean = true> {
  sections?:
    | T
    | {
        id?: T;
        type?: T;
        title?: T;
        subtitle?: T;
        theme?:
          | T
          | {
              background?: T;
              headerAccent?: T;
              titleColor?: T;
              subtitleColor?: T;
            };
        navigation?:
          | T
          | {
              position?: T;
            };
        items?:
          | T
          | {
              packageItem?: T | DynamicScroller_PackageItemSelect<T>;
              itineraryDay?: T | DynamicScroller_ItineraryDaySelect<T>;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_PackageItem_select".
 */
export interface DynamicScroller_PackageItemSelect<T extends boolean = true> {
  id?: T;
  title?: T;
  price?: T;
  image?: T;
  tag?: T;
  tagColor?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_ItineraryDay_select".
 */
export interface DynamicScroller_ItineraryDaySelect<T extends boolean = true> {
  day?: T;
  activities?:
    | T
    | {
        icon?: T;
        description?: T;
        detailsImage?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopularNowBlock_select".
 */
export interface PopularNowBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  pauseOnHover?: T;
  rows?:
    | T
    | {
        direction?: T;
        speedSeconds?: T;
        cards?:
          | T
          | {
              name?: T;
              price?: T;
              image?: T;
              imageUrl?: T;
              alt?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UpDownCardCarouselBlock_select".
 */
export interface UpDownCardCarouselBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  cards?:
    | T
    | {
        name?: T;
        details?: T;
        price?: T;
        discount?: T;
        image?: T;
        imageUrl?: T;
        alt?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientStoriesBlock_select".
 */
export interface ClientStoriesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  buttonText?: T;
  background?: T;
  backgroundUrl?: T;
  overlay?: T;
  cardsPerView?: T;
  gapPx?: T;
  cards?:
    | T
    | {
        name?: T;
        rating?: T;
        story?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstagramCarouselBlock_select".
 */
export interface InstagramCarouselBlockSelect<T extends boolean = true> {
  heading?: T;
  profile?:
    | T
    | {
        handle?: T;
        profileUrl?: T;
        followLabel?: T;
      };
  layout?:
    | T
    | {
        columnsDesktop?: T;
        columnsTablet?: T;
        columnsMobile?: T;
        gutter?: T;
        showCaptions?: T;
      };
  posts?:
    | T
    | {
        url?: T;
        captioned?: T;
        id?: T;
      };
  caption?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGridBlock_select".
 */
export interface ImageGridBlockSelect<T extends boolean = true> {
  leftHero?:
    | T
    | {
        title?: T;
        rating?: T;
        trail?: T;
        image?: T;
        imageUrl?: T;
        alt?: T;
      };
  explore?:
    | T
    | {
        subtitle?: T;
        title?: T;
        description?: T;
        button?:
          | T
          | {
              label?: T;
              href?: T;
            };
      };
  spots?:
    | T
    | {
        name?: T;
        rating?: T;
        location?: T;
        image?: T;
        imageUrl?: T;
        alt?: T;
        id?: T;
      };
  activities?:
    | T
    | {
        subtitle?: T;
        title?: T;
        description?: T;
        button?:
          | T
          | {
              label?: T;
              href?: T;
            };
        tag?: T;
        image?: T;
        imageUrl?: T;
        alt?: T;
      };
  labels?:
    | T
    | {
        ratingPrefix?: T;
      };
  theme?:
    | T
    | {
        dark?: T;
        container?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelPackageExplorerBlock_select".
 */
export interface TravelPackageExplorerBlockSelect<T extends boolean = true> {
  packages?:
    | T
    | {
        title?: T;
        location?: T;
        rating?: T;
        reviews?: T;
        description?: T;
        price?: T;
        originalPrice?: T;
        duration?: T;
        experiences?: T;
        accommodationType?: T;
        amenities?: T;
        province?: T;
        image?: T;
        imageUrl?: T;
        inclusions?: T;
        suitability?:
          | T
          | {
              couples?: T;
              family?: T;
            };
        recentBookings?: T;
        sights?:
          | T
          | {
              name?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  phone?: T;
  marketingOptIn?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories_select".
 */
export interface PackageCategoriesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  parent?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations_select".
 */
export interface DestinationsSelect<T extends boolean = true> {
  name?: T;
  summary?: T;
  heroImage?: T;
  startingFromPricePerPerson?: T;
  labels?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  tagline?: T;
  summary?: T;
  description?: T;
  rating?: T;
  stars?: T;
  isFeatured?: T;
  isFamilyFriendly?: T;
  bookingsCount30d?: T;
  minPricePerPerson?: T;
  currency?: T;
  durationDays?: T;
  coverImage?: T;
  route?:
    | T
    | {
        city?: T;
        notes?: T;
        id?: T;
      };
  itinerary?:
    | T
    | {
        dayNumber?: T;
        title?: T;
        description?: T;
        mealsIncluded?:
          | T
          | {
              breakfast?: T;
              lunch?: T;
              dinner?: T;
            };
        image?: T;
        places?: T;
        notes?: T;
        id?: T;
      };
  highlights?:
    | T
    | {
        text?: T;
        id?: T;
      };
  goodToKnow?:
    | T
    | {
        text?: T;
        id?: T;
      };
  prices?:
    | T
    | {
        roomOccupancy?: T;
        pricePerPerson?: T;
        currency?: T;
        validFrom?: T;
        validTo?: T;
        notes?: T;
        id?: T;
      };
  categories?: T;
  activities?: T;
  amenities?: T;
  accommodationTypes?: T;
  inclusions?: T;
  exclusions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodation-types_select".
 */
export interface AccommodationTypesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities_select".
 */
export interface AmenitiesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings_select".
 */
export interface BookingsSelect<T extends boolean = true> {
  user?: T;
  package?: T;
  startDate?: T;
  endDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bulk-booking-requests_select".
 */
export interface BulkBookingRequestsSelect<T extends boolean = true> {
  contactName?: T;
  email?: T;
  phone?: T;
  organization?: T;
  destination?: T;
  desiredStartDate?: T;
  desiredEndDate?: T;
  numPeople?: T;
  message?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  destination?: T;
  regions?: T;
  latitude?: T;
  longitude?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "custom-trip-requests_select".
 */
export interface CustomTripRequestsSelect<T extends boolean = true> {
  user?: T;
  destination?: T;
  budgetMin?: T;
  budgetMax?: T;
  numPeople?: T;
  startDate?: T;
  endDate?: T;
  preferences?: T;
  source?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exclusions_select".
 */
export interface ExclusionsSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favorites_select".
 */
export interface FavoritesSelect<T extends boolean = true> {
  user?: T;
  target?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inclusions_select".
 */
export interface InclusionsSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketing-banners_select".
 */
export interface MarketingBannersSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  percentageOff?: T;
  image?: T;
  ctaText?: T;
  ctaTarget?: T;
  ctaRef?: T;
  ctaUrl?: T;
  sortOrder?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places_select".
 */
export interface PlacesSelect<T extends boolean = true> {
  name?: T;
  city?: T;
  type?: T;
  description?: T;
  address?: T;
  latitude?: T;
  longitude?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions_select".
 */
export interface PromotionsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  discountType?: T;
  discountValue?: T;
  maxDiscountAmount?: T;
  startsAt?: T;
  endsAt?: T;
  isActive?: T;
  bannerImage?: T;
  packages?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
  name?: T;
  destination?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  user?: T;
  package?: T;
  destination?: T;
  rating?: T;
  title?: T;
  body?: T;
  photos?:
    | T
    | {
        image?: T;
        id?: T;
      };
  published?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-posts_select".
 */
export interface SocialPostsSelect<T extends boolean = true> {
  platform?: T;
  handle?: T;
  externalId?: T;
  caption?: T;
  image?: T;
  postedAt?: T;
  isPinned?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo: string | Media;
  navItems?:
    | {
        label: string;
        href: string;
        id?: string | null;
      }[]
    | null;
  curateButton?: {
    show?: boolean | null;
    text?: string | null;
    href?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logo?: (string | null) | Media;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  navGroups?:
    | {
        groupLabel: string;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  socialLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  legalLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  showThemeSelector?: boolean | null;
  copyright?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-filters".
 */
export interface SearchFilter {
  id: string;
  /**
   * Featured destinations in search dropdown
   */
  destinations?: (string | Destination)[] | null;
  /**
   * Categories shown in search filter
   */
  categories?: (string | PackageCategory)[] | null;
  priceRanges?:
    | {
        label: string;
        min?: number | null;
        max?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packageLayout".
 */
export interface PackageLayout {
  id: string;
  hero: {
    type: 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide.
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with a transparent background. This will be layered at the bottom.
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds (e.g., 8000 = 8 seconds).
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds.
       */
      transitionDuration?: number | null;
      destinationOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      categoryOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    destinationHeroFields?: {
      /**
       * The main heading displayed on the hero
       */
      destination: string;
      cities: {
        name: string;
        /**
         * High-resolution image for the city background
         */
        image: string | Media;
        id?: string | null;
      }[];
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    packageHeroFields?: {
      /**
       * Rating out of 5 stars
       */
      rating: number;
      /**
       * Location itinerary description
       */
      location: string;
      /**
       * Detailed description of the travel package
       */
      description: string;
      vacationTypes: {
        /**
         * Type name (e.g., Couples, Family)
         */
        type: string;
        /**
         * Descriptive label for the vacation type
         */
        label: string;
        /**
         * Emoji icon for the vacation type
         */
        icon: string;
        /**
         * Percentage value (0-100)
         */
        percentage: number;
        id?: string | null;
      }[];
      pricing: {
        /**
         * Original price (formatted with commas)
         */
        originalPrice: string;
        /**
         * Discounted price (formatted with commas)
         */
        discountedPrice: string;
        /**
         * Currency symbol
         */
        currency?: string | null;
      };
      /**
       * Number of bookings (e.g., 250+)
       */
      bookingCount: string;
      /**
       * Profile images of recent customers
       */
      recentBookings?:
        | {
            avatar: string | Media;
            id?: string | null;
          }[]
        | null;
      /**
       * The main promotional image for the package
       */
      mainImage: string | Media;
      /**
       * Background image for the card
       */
      backgroundImage: string | Media;
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title for the hero section
         */
        title: string;
        stops?:
          | {
              /**
               * Name of the attraction (e.g., Park Güell)
               */
              name: string;
              /**
               * City where the attraction is located
               */
              city: string;
              /**
               * Hero image for the attraction
               */
              image: string | Media;
              /**
               * Short description of the attraction
               */
              excerpt: string;
              /**
               * URL slug for the attraction page (optional)
               */
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        displaySettings?: {
          /**
           * Scale up the centered card
           */
          showActiveScale?: boolean | null;
          /**
           * Number of cards visible at once
           */
          visibleWindow?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | TravelPackageExplorerBlock
    | PackageHighlightsBlock
    | FeatureCarouselBlock
    | HeaderPointsBlock
    | ImageGridBlock
  )[];
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackageHighlightsBlock".
 */
export interface PackageHighlightsBlock {
  /**
   * Main heading for the package highlights section
   */
  heading: string;
  /**
   * Subtitle text below the heading
   */
  subheading?: string | null;
  /**
   * List of package highlights (each with a star icon)
   */
  highlights: {
    highlightText: string;
    id?: string | null;
  }[];
  /**
   * Exactly 7 images for the gallery mosaic layout (positions are pre-defined)
   */
  galleryImages: {
    /**
     * Upload an image for the gallery
     */
    image: string | Media;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'packageHighlights';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureCarouselBlock".
 */
export interface FeatureCarouselBlock {
  /**
   * Main heading displayed at the top of the carousel.
   */
  heading: string;
  /**
   * Optional subheading displayed below the main heading.
   */
  subheading?: string | null;
  /**
   * Add feature cards to display in the scrollable carousel.
   */
  cards: {
    title: string;
    description: string;
    id?: string | null;
  }[];
  /**
   * Display left/right navigation buttons for manual scrolling.
   */
  showNavigationButtons?: boolean | null;
  /**
   * Percentage of container width to scroll on button click (10-100).
   */
  scrollPercentage?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeaderPointsBlock".
 */
export interface HeaderPointsBlock {
  /**
   * Main heading displayed at the top.
   */
  heading: string;
  /**
   * Optional subheading displayed below the main heading. Leave empty to hide.
   */
  subheading?: string | null;
  /**
   * Choose how the list items should be displayed.
   */
  listStyle?: ('decimal' | 'disc') | null;
  /**
   * Add points or items to display in the list.
   */
  points: {
    text: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'headerPoints';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinationLayout".
 */
export interface DestinationLayout {
  id: string;
  hero: {
    type: 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide.
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with a transparent background. This will be layered at the bottom.
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds (e.g., 8000 = 8 seconds).
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds.
       */
      transitionDuration?: number | null;
      destinationOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      categoryOptions?:
        | {
            label: string;
            value: string;
            id?: string | null;
          }[]
        | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    destinationHeroFields?: {
      /**
       * The main heading displayed on the hero
       */
      destination: string;
      cities: {
        name: string;
        /**
         * High-resolution image for the city background
         */
        image: string | Media;
        id?: string | null;
      }[];
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    packageHeroFields?: {
      /**
       * Rating out of 5 stars
       */
      rating: number;
      /**
       * Location itinerary description
       */
      location: string;
      /**
       * Detailed description of the travel package
       */
      description: string;
      vacationTypes: {
        /**
         * Type name (e.g., Couples, Family)
         */
        type: string;
        /**
         * Descriptive label for the vacation type
         */
        label: string;
        /**
         * Emoji icon for the vacation type
         */
        icon: string;
        /**
         * Percentage value (0-100)
         */
        percentage: number;
        id?: string | null;
      }[];
      pricing: {
        /**
         * Original price (formatted with commas)
         */
        originalPrice: string;
        /**
         * Discounted price (formatted with commas)
         */
        discountedPrice: string;
        /**
         * Currency symbol
         */
        currency?: string | null;
      };
      /**
       * Number of bookings (e.g., 250+)
       */
      bookingCount: string;
      /**
       * Profile images of recent customers
       */
      recentBookings?:
        | {
            avatar: string | Media;
            id?: string | null;
          }[]
        | null;
      /**
       * The main promotional image for the package
       */
      mainImage: string | Media;
      /**
       * Background image for the card
       */
      backgroundImage: string | Media;
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title for the hero section
         */
        title: string;
        stops?:
          | {
              /**
               * Name of the attraction (e.g., Park Güell)
               */
              name: string;
              /**
               * City where the attraction is located
               */
              city: string;
              /**
               * Hero image for the attraction
               */
              image: string | Media;
              /**
               * Short description of the attraction
               */
              excerpt: string;
              /**
               * URL slug for the attraction page (optional)
               */
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        displaySettings?: {
          /**
           * Scale up the centered card
           */
          showActiveScale?: boolean | null;
          /**
           * Number of cards visible at once
           */
          visibleWindow?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | TravelPackageExplorerBlock
  )[];
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        label?: T;
        href?: T;
        id?: T;
      };
  curateButton?:
    | T
    | {
        show?: T;
        text?: T;
        href?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  navGroups?:
    | T
    | {
        groupLabel?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  legalLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  showThemeSelector?: T;
  copyright?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-filters_select".
 */
export interface SearchFiltersSelect<T extends boolean = true> {
  destinations?: T;
  categories?: T;
  priceRanges?:
    | T
    | {
        label?: T;
        min?: T;
        max?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packageLayout_select".
 */
export interface PackageLayoutSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              categoryOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              destination?: T;
              cities?:
                | T
                | {
                    name?: T;
                    image?: T;
                    id?: T;
                  };
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              rating?: T;
              location?: T;
              description?: T;
              vacationTypes?:
                | T
                | {
                    type?: T;
                    label?: T;
                    icon?: T;
                    percentage?: T;
                    id?: T;
                  };
              pricing?:
                | T
                | {
                    originalPrice?: T;
                    discountedPrice?: T;
                    currency?: T;
                  };
              bookingCount?: T;
              recentBookings?:
                | T
                | {
                    avatar?: T;
                    id?: T;
                  };
              mainImage?: T;
              backgroundImage?: T;
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              displaySettings?:
                | T
                | {
                    showActiveScale?: T;
                    visibleWindow?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
        packageHighlights?: T | PackageHighlightsBlockSelect<T>;
        featureCarousel?: T | FeatureCarouselBlockSelect<T>;
        headerPoints?: T | HeaderPointsBlockSelect<T>;
        imageGrid?: T | ImageGridBlockSelect<T>;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackageHighlightsBlock_select".
 */
export interface PackageHighlightsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  highlights?:
    | T
    | {
        highlightText?: T;
        id?: T;
      };
  galleryImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureCarouselBlock_select".
 */
export interface FeatureCarouselBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  cards?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  showNavigationButtons?: T;
  scrollPercentage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeaderPointsBlock_select".
 */
export interface HeaderPointsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  listStyle?: T;
  points?:
    | T
    | {
        text?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinationLayout_select".
 */
export interface DestinationLayoutSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              categoryOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              destination?: T;
              cities?:
                | T
                | {
                    name?: T;
                    image?: T;
                    id?: T;
                  };
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              rating?: T;
              location?: T;
              description?: T;
              vacationTypes?:
                | T
                | {
                    type?: T;
                    label?: T;
                    icon?: T;
                    percentage?: T;
                    id?: T;
                  };
              pricing?:
                | T
                | {
                    originalPrice?: T;
                    discountedPrice?: T;
                    currency?: T;
                  };
              bookingCount?: T;
              recentBookings?:
                | T
                | {
                    avatar?: T;
                    id?: T;
                  };
              mainImage?: T;
              backgroundImage?: T;
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              displaySettings?:
                | T
                | {
                    showActiveScale?: T;
                    visibleWindow?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
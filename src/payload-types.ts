/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    'package-categories': PackageCategory;
    destinations: Destination;
    packages: Package;
    'accommodation-types': AccommodationType;
    activities: Activity;
    amenities: Amenity;
    bookings: Booking;
    'bulk-booking-requests': BulkBookingRequest;
    cities: City;
    'custom-trip-requests': CustomTripRequest;
    exclusions: Exclusion;
    favorites: Favorite;
    inclusions: Inclusion;
    'marketing-banners': MarketingBanner;
    places: Place;
    promotions: Promotion;
    regions: Region;
    reviews: Review;
    'social-posts': SocialPost;
    vibes: Vibe;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'package-categories': PackageCategoriesSelect<false> | PackageCategoriesSelect<true>;
    destinations: DestinationsSelect<false> | DestinationsSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    'accommodation-types': AccommodationTypesSelect<false> | AccommodationTypesSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    amenities: AmenitiesSelect<false> | AmenitiesSelect<true>;
    bookings: BookingsSelect<false> | BookingsSelect<true>;
    'bulk-booking-requests': BulkBookingRequestsSelect<false> | BulkBookingRequestsSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    'custom-trip-requests': CustomTripRequestsSelect<false> | CustomTripRequestsSelect<true>;
    exclusions: ExclusionsSelect<false> | ExclusionsSelect<true>;
    favorites: FavoritesSelect<false> | FavoritesSelect<true>;
    inclusions: InclusionsSelect<false> | InclusionsSelect<true>;
    'marketing-banners': MarketingBannersSelect<false> | MarketingBannersSelect<true>;
    places: PlacesSelect<false> | PlacesSelect<true>;
    promotions: PromotionsSelect<false> | PromotionsSelect<true>;
    regions: RegionsSelect<false> | RegionsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    'social-posts': SocialPostsSelect<false> | SocialPostsSelect<true>;
    vibes: VibesSelect<false> | VibesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    'search-filters': SearchFilter;
    packageLayout: PackageLayout;
    destinationLayout: DestinationLayout;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'search-filters': SearchFiltersSelect<false> | SearchFiltersSelect<true>;
    packageLayout: PackageLayoutSelect<false> | PackageLayoutSelect<true>;
    destinationLayout: DestinationLayoutSelect<false> | DestinationLayoutSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'none' | 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with transparent background
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds
       */
      transitionDuration?: number | null;
      /**
       * Destinations to show in search dropdown
       */
      destinationOptions?: (string | Destination)[] | null;
      /**
       * Package categories for search
       */
      categoryOptions?: (string | PackageCategory)[] | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    /**
     * ⚡ Destination will be auto-detected from URL slug
     */
    destinationHeroFields?: {
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    /**
     * ⚡ Package will be auto-detected from URL slug
     */
    packageHeroFields?: {
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title. Use {slug} for auto-replacement (e.g., "Things to do in {slug}" → "Things to do in Spain")
         */
        title: string;
        /**
         * How to populate attractions
         */
        populateBy?: ('auto' | 'destination' | 'manual') | null;
        /**
         * Select destination to show its places
         */
        destination?: (string | null) | Destination;
        /**
         * Number of places to show
         */
        limit?: number | null;
        stops?:
          | {
              name: string;
              city: string;
              image: string | Media;
              excerpt: string;
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        timingSettings: {
          /**
           * Auto-scroll delay in milliseconds
           */
          autoplayDelay: number;
          /**
           * Transition duration in milliseconds
           */
          transitionDuration: number;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | ImageGridBlock
    | TravelPackageExplorerBlock
    | DynamicFormBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Manage destination countries and their content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations".
 */
export interface Destination {
  id: string;
  /**
   * Destination name (e.g., Spain, Indonesia)
   */
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Brief description for cards on homepage (max 200 characters)
   */
  shortDescription: string;
  /**
   * Full destination overview displayed on destination page
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Main image shown on homepage destination cards
   */
  featuredImage: string | Media;
  /**
   * Hero banner image for destination page
   */
  coverImage: string | Media;
  /**
   * Additional images showcasing the destination
   */
  gallery?: (string | Media)[] | null;
  /**
   * Data for DestinationHero component
   */
  heroData?: {
    /**
     * Inspirational tagline shown on hero
     */
    tagline?: string | null;
    /**
     * Famous elevation/landmark (e.g., "Mount Everest 10,348 ft")
     */
    elevation?: string | null;
    /**
     * Optional decorative pattern/overlay for hero
     */
    heroBackgroundPattern?: (string | null) | Media;
  };
  /**
   * Broader geographical area (e.g., Europe, Asia)
   */
  region?: (string | null) | Region;
  /**
   * Country name (if destination is a region within a country)
   */
  country?: string | null;
  /**
   * Continent for filtering
   */
  continent?: ('asia' | 'europe' | 'north-america' | 'south-america' | 'africa' | 'oceania') | null;
  /**
   * Cities within this destination (shown as tabs in hero)
   */
  cities?: (string | City)[] | null;
  /**
   * Tourist attractions for "Things to do" carousel
   */
  places?: (string | Place)[] | null;
  /**
   * Lowest package price
   */
  startingPrice?: number | null;
  currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
  /**
   * Discount badge shown on destination cards
   */
  discount?: {
    hasDiscount?: boolean | null;
    /**
     * Discount percentage (e.g., 10 for "10% Off")
     */
    percentage?: number | null;
    /**
     * Custom discount label
     */
    label?: string | null;
  };
  /**
   * Brief location description shown on cards (e.g., "Mediterranean coast, rich culture")
   */
  locationDetails?: string | null;
  /**
   * Auto-calculated: number of packages for this destination
   */
  packageCount?: number | null;
  /**
   * Show in "Featured Destinations" homepage section
   */
  isFeatured?: boolean | null;
  /**
   * Display "Popular" badge
   */
  isPopular?: boolean | null;
  /**
   * Show in "In Season" section with badge
   */
  isInSeason?: boolean | null;
  /**
   * Apply categories like "Family Friendly", "Adventure"
   */
  categories?: (string | Category)[] | null;
  /**
   * Destination vibes/moods (e.g., Outdoor, Relaxing, Glamping)
   */
  vibes?: (string | Vibe)[] | null;
  /**
   * Higher score = more prominent placement
   */
  popularityScore?: number | null;
  /**
   * Manual ordering (lower = appears first)
   */
  displayOrder?: number | null;
  /**
   * Key highlights/selling points
   */
  highlights?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Best months to visit
   */
  bestTimeToVisit?: string | null;
  /**
   * Languages spoken
   */
  languages?: string | null;
  timezone?: string | null;
  latitude?: number | null;
  longitude?: number | null;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
  id: string;
  /**
   * Region name (e.g., Catalonia, Andalusia)
   */
  name: string;
  /**
   * Parent destination
   */
  destination: string | Destination;
  /**
   * Type of regional division
   */
  type?: ('province' | 'territory' | 'county' | 'district' | 'other') | null;
  description?: string | null;
  /**
   * Region code (e.g., "CAT", "AND")
   */
  code?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: string;
  /**
   * City name (e.g., Barcelona, Madrid)
   */
  name: string;
  /**
   * URL slug
   */
  slug: string;
  /**
   * Parent destination
   */
  destination: string | Destination;
  /**
   * Background image for hero tab (shown when city is selected)
   */
  heroImage: string | Media;
  /**
   * Brief city description
   */
  description?: string | null;
  /**
   * City thumbnail/card image
   */
  featuredImage?: (string | null) | Media;
  latitude?: number | null;
  longitude?: number | null;
  /**
   * Order in destination hero tabs
   */
  displayOrder?: number | null;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places".
 */
export interface Place {
  id: string;
  /**
   * Place name (e.g., Sagrada Familia, Royal Palace)
   */
  name: string;
  slug: string;
  /**
   * Brief excerpt for carousel cards (max 150 chars)
   */
  shortDescription: string;
  /**
   * Full place description
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Main place image for carousel
   */
  image: string | Media;
  gallery?: (string | Media)[] | null;
  destination: string | Destination;
  city: string | City;
  category?: ('landmark' | 'museum' | 'park' | 'beach' | 'restaurant' | 'shopping' | 'nightlife' | 'activity') | null;
  latitude?: number | null;
  longitude?: number | null;
  /**
   * Order in carousel (lower = appears first)
   */
  displayOrder?: number | null;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Categories for experiences, trip types, vibes, and destination labels
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  /**
   * Category name (e.g., Adventure, Romantic, Family Friendly)
   */
  name: string;
  /**
   * Type of category for filtering and organization
   */
  type: 'experience' | 'trip_type' | 'vibe' | 'destination_label' | 'package_label';
  /**
   * URL-friendly identifier (auto-generated from name)
   */
  slug: string;
  /**
   * Detailed description of the category
   */
  description?: string | null;
  /**
   * Optional parent category for hierarchy
   */
  parent?: (string | null) | Category;
  /**
   * Icon for the category (optional)
   */
  icon?: (string | null) | Media;
  /**
   * Badge/tag color (hex code)
   */
  color?: string | null;
  /**
   * Display order (lower = appears first)
   */
  displayOrder?: number | null;
  /**
   * Active categories appear in filters and badges
   */
  isActive?: boolean | null;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vibes".
 */
export interface Vibe {
  id: string;
  /**
   * Vibe name (e.g., "Outdoor", "Relaxing", "Glamping")
   */
  name: string;
  /**
   * URL-friendly slug
   */
  slug: string;
  /**
   * Brief description of this vibe
   */
  description?: string | null;
  /**
   * Icon/image representing this vibe
   */
  icon?: (string | null) | Media;
  /**
   * Badge color for this vibe
   */
  color?: ('orange' | 'red' | 'blue' | 'green' | 'purple') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories".
 */
export interface PackageCategory {
  id: string;
  /**
   * Category name (e.g., "For Couples", "Family Friendly")
   */
  name: string;
  /**
   * URL-friendly slug
   */
  slug: string;
  type: 'experience' | 'trip_type' | 'vibe' | 'destination_label';
  /**
   * Optional parent category for hierarchy
   */
  parent?: (string | null) | PackageCategory;
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'customer' | 'agent' | 'admin';
  phone?: string | null;
  marketingOptIn?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScrollerBlock".
 */
export interface DynamicScrollerBlock {
  sections: (
    | DynamicScroller_PackageSection
    | DynamicScroller_DestinationSection
    | DynamicScroller_VibeSection
    | DynamicScroller_ItinerarySection
  )[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'dynamicScroller';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_PackageSection".
 */
export interface DynamicScroller_PackageSection {
  /**
   * Use {slug} for auto-replacement
   */
  title?: string | null;
  subtitle?: string | null;
  populatePackagesBy: 'manual' | 'auto' | 'featured' | 'featuredDestinations' | 'destinations' | 'vibes';
  /**
   * Select multiple destinations
   */
  destinations?: (string | Destination)[] | null;
  /**
   * Select multiple vibes
   */
  vibes?: (string | Vibe)[] | null;
  packageLimit?: number | null;
  manualItems?:
    | {
        title: string;
        price: string;
        image: string | Media;
        tag?: string | null;
        tagColor?: string | null;
        id?: string | null;
      }[]
    | null;
  theme?: {
    background?: string | null;
  };
  showNavigation?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'packageSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_DestinationSection".
 */
export interface DynamicScroller_DestinationSection {
  title?: string | null;
  subtitle?: string | null;
  populateDestinationsBy: 'featured' | 'popular' | 'inSeason' | 'manual';
  destinationLimit?: number | null;
  manualItems?:
    | {
        title: string;
        price: string;
        image: string | Media;
        tag?: string | null;
        tagColor?: string | null;
        id?: string | null;
      }[]
    | null;
  theme?: {
    background?: string | null;
  };
  showNavigation?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'destinationSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_VibeSection".
 */
export interface DynamicScroller_VibeSection {
  /**
   * Section heading
   */
  title?: string | null;
  /**
   * Optional subtitle
   */
  subtitle?: string | null;
  /**
   * Select vibes to display (e.g., Outdoor, Relaxing, Glamping, Girls Day Out)
   */
  vibes: (string | Vibe)[];
  /**
   * How many packages to show per vibe
   */
  packagesPerVibe?: number | null;
  theme?: {
    background?: string | null;
  };
  showNavigation?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'vibeSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_ItinerarySection".
 */
export interface DynamicScroller_ItinerarySection {
  title?: string | null;
  subtitle?: string | null;
  itinerarySource: 'manual' | 'package';
  manualDays?:
    | {
        day: string;
        activities?:
          | {
              icon?: (string | null) | Media;
              description: string;
              detailsImage?: (string | null) | Media;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  theme?: {
    background?: string | null;
  };
  showNavigation?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'itinerarySection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopularNowBlock".
 */
export interface PopularNowBlock {
  heading?: string | null;
  subheading?: string | null;
  pauseOnHover?: boolean | null;
  rows: {
    /**
     * Choose data source for this row
     */
    dataSource:
      | 'manual'
      | 'featured-destinations'
      | 'popular-destinations'
      | 'in-season-destinations'
      | 'featured-packages'
      | 'recent-packages'
      | 'honeymoon-packages'
      | 'family-packages';
    /**
     * Number of items to display
     */
    itemLimit?: number | null;
    /**
     * Scroll direction
     */
    direction: 'left' | 'right';
    /**
     * Animation speed
     */
    speedSeconds: number;
    cards?:
      | {
          name: string;
          price: string;
          image: string | Media;
          /**
           * Alt text for accessibility
           */
          alt?: string | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'popularNow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UpDownCardCarouselBlock".
 */
export interface UpDownCardCarouselBlock {
  /**
   * Choose destinations or packages to display
   */
  dataSource:
    | 'inSeason'
    | 'featured'
    | 'popular'
    | 'featuredPackages'
    | 'recentPackages'
    | 'honeymoonPackages'
    | 'familyPackages'
    | 'manual';
  /**
   * Number of items to display
   */
  itemLimit?: number | null;
  heading?: string | null;
  /**
   * Optional tagline shown under the heading.
   */
  subheading?: string | null;
  cards?:
    | {
        name: string;
        details?: string | null;
        /**
         * Price in INR.
         */
        price: number;
        discount?: string | null;
        image?: (string | null) | Media;
        imageUrl?: string | null;
        alt?: string | null;
        href?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'upDownCardCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientStoriesBlock".
 */
export interface ClientStoriesBlock {
  /**
   * Use {slug} to auto-replace with destination/package name
   */
  heading?: string | null;
  /**
   * Use {slug} for dynamic text replacement
   */
  subheading?: string | null;
  buttonText?: string | null;
  background?: (string | null) | Media;
  /**
   * Optional external image URL.
   */
  backgroundUrl?: string | null;
  /**
   * Decorative overlay image placed behind cards.
   */
  overlay?: (string | null) | Media;
  /**
   * How many cards are visible at once.
   */
  cardsPerView?: number | null;
  gapPx?: number | null;
  /**
   * Choose how to populate review cards
   */
  populateBy?: ('manual' | 'collection' | 'featured') | null;
  /**
   * Number of reviews to fetch from collection
   */
  limit?: number | null;
  cards?:
    | {
        name: string;
        rating: number;
        story: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'clientStories';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstagramCarouselBlock".
 */
export interface InstagramCarouselBlock {
  /**
   * Choose where to load Instagram posts from
   */
  dataSource: 'manual' | 'featured' | 'recent';
  /**
   * Number of posts to display
   */
  postLimit?: number | null;
  posts?:
    | {
        url: string;
        /**
         * Show caption for this post
         */
        captioned?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Section heading
   */
  heading?: string | null;
  profile?: {
    handle?: string | null;
    profileUrl?: string | null;
    followLabel?: string | null;
    avatarUrl?: (string | null) | Media;
  };
  layout?: {
    columnsDesktop?: number | null;
    columnsTablet?: number | null;
    columnsMobile?: number | null;
    /**
     * Space between posts (e.g., 12px, 1rem)
     */
    gutter?: string | null;
    /**
     * Show Instagram captions on all posts
     */
    showCaptions?: boolean | null;
  };
  /**
   * Optional text below the grid
   */
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'instagramCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGridBlock".
 */
export interface ImageGridBlock {
  dataSource: 'manual' | 'featured' | 'destination' | 'package';
  destination?: (string | null) | Destination;
  package?: (string | null) | Package;
  featuredLimit?: number | null;
  manualData?: {
    leftHero?: {
      title?: string | null;
      rating?: number | null;
      trail?: string | null;
      image?: (string | null) | Media;
    };
    explore?: {
      subtitle?: string | null;
      title?: string | null;
      description?: string | null;
      button?: {
        label?: string | null;
        href?: string | null;
      };
    };
    spots?:
      | {
          name?: string | null;
          rating?: number | null;
          location?: string | null;
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    activities?: {
      subtitle?: string | null;
      title?: string | null;
      description?: string | null;
      button?: {
        label?: string | null;
        href?: string | null;
      };
      tag?: string | null;
      image?: (string | null) | Media;
    };
  };
  labels?: {
    ratingPrefix?: string | null;
  };
  theme?: {
    dark?: boolean | null;
    container?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  /**
   * Package name (e.g., "Spanish Escape")
   */
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Short tagline for the package
   */
  tagline?: string | null;
  /**
   * Brief summary for package cards (e.g., "Madrid 2N, Seville 2N, Granada 1N...")
   */
  summary: string;
  /**
   * Full package description shown on package page
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Main package image for hero and cards
   */
  heroImage: string | Media;
  /**
   * Additional package images
   */
  gallery?: (string | Media)[] | null;
  /**
   * Destinations included in this package
   */
  destinations: (string | Destination)[];
  /**
   * Cities included with nights (e.g., Madrid 2N, Seville 2N)
   */
  route?:
    | {
        city: string | City;
        /**
         * Number of nights in this city
         */
        nights?: number | null;
        /**
         * Sequence order
         */
        order: number;
        id?: string | null;
      }[]
    | null;
  /**
   * e.g., "8N/9D", "7 Days / 8 Nights"
   */
  duration: string;
  /**
   * Starting price per person
   */
  price: number;
  currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
  /**
   * Discounted price (optional)
   */
  discountedPrice?: number | null;
  /**
   * Star rating (1-5 stars) shown on package hero
   */
  starRating?: number | null;
  /**
   * Complete day-by-day itinerary - used by DynamicScroller block
   */
  itinerary?:
    | {
        /**
         * Day number (e.g., 1, 2, 3)
         */
        dayNumber: number;
        /**
         * Day label for DynamicScroller (e.g., "Day 1 - Arrival Into Paris")
         */
        day: string;
        /**
         * Activities shown in DynamicScroller itinerary cards
         */
        activities?:
          | {
              /**
               * Small icon for this activity (e.g., plane, hotel, food)
               */
              icon?: (string | null) | Media;
              /**
               * Activity description (e.g., "Check-in at hotel", "Visit Eiffel Tower")
               */
              description: string;
              /**
               * Optional thumbnail image for this activity
               */
              detailsImage?: (string | null) | Media;
              id?: string | null;
            }[]
          | null;
        /**
         * Additional title (for package detail page)
         */
        title?: string | null;
        /**
         * Optional subtitle
         */
        subtitle?: string | null;
        /**
         * Full day description for package detail page
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * City visited on this day
         */
        city?: (string | null) | City;
        /**
         * Places/attractions visited on this day
         */
        places?: (string | Place)[] | null;
        mealsIncluded?: {
          breakfast?: boolean | null;
          lunch?: boolean | null;
          dinner?: boolean | null;
        };
        /**
         * Hero image for this day
         */
        image?: (string | null) | Media;
        /**
         * Additional notes/tips for this day
         */
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Key highlights with icons (e.g., "★ Return Economy Class Airfare")
   */
  highlights?:
    | {
        icon?: ('star' | 'flight' | 'hotel' | 'meal' | 'transport' | 'ticket' | 'activity' | 'feature') | null;
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * What's included in the package
   */
  inclusions?: (string | Inclusion)[] | null;
  /**
   * What's not included
   */
  exclusions?: (string | Exclusion)[] | null;
  /**
   * Important information for travelers
   */
  goodToKnow?:
    | {
        /**
         * Info title (optional)
         */
        title?: string | null;
        text: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Package labels like Best Seller / Premium
   */
  labels?: (string | Category)[] | null;
  /**
   * Target audience (Couples, Family, Solo, etc.)
   */
  categories?: (string | PackageCategory)[] | null;
  /**
   * Activity types included
   */
  activities?: (string | Activity)[] | null;
  amenities?: (string | Amenity)[] | null;
  accommodationTypes?: (string | AccommodationType)[] | null;
  /**
   * Package vibe/mood (e.g., Outdoor, Relaxing, Glamping, Girls Day Out)
   */
  vibe?: (string | null) | Vibe;
  /**
   * Average customer rating
   */
  rating?: number | null;
  /**
   * Bookings in past 30 days (e.g., "250+ bookings")
   */
  bookingsCount30d?: number | null;
  /**
   * Show in featured sections
   */
  isFeatured?: boolean | null;
  isFamilyFriendly?: boolean | null;
  isHoneymoon?: boolean | null;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inclusions".
 */
export interface Inclusion {
  id: string;
  /**
   * Unique code (e.g., "INC001", "BREAKFAST")
   */
  code: string;
  /**
   * Display name (e.g., "Daily Breakfast", "Airport Transfers")
   */
  name: string;
  category?: ('accommodation' | 'transportation' | 'meals' | 'activities' | 'guides' | 'other') | null;
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exclusions".
 */
export interface Exclusion {
  id: string;
  /**
   * Unique code (e.g., "EXC001", "INTL_FLIGHT")
   */
  code: string;
  /**
   * Display name (e.g., "International Flights", "Travel Insurance")
   */
  name: string;
  category?: ('transportation' | 'meals' | 'insurance' | 'personal' | 'documents' | 'other') | null;
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: string;
  name: string;
  type: 'adventure' | 'leisure' | 'cultural' | 'water_sports' | 'nature' | 'dining' | 'other';
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities".
 */
export interface Amenity {
  id: string;
  name: string;
  type: 'logistic' | 'accessibility' | 'accommodation' | 'food' | 'transport' | 'other';
  description?: string | null;
  icon?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodation-types".
 */
export interface AccommodationType {
  id: string;
  /**
   * E.g., "5-Star Hotel", "Beach Resort", "Villa"
   */
  name: string;
  type?: ('hotel' | 'resort' | 'villa' | 'apartment' | 'guesthouse' | 'other') | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelPackageExplorerBlock".
 */
export interface TravelPackageExplorerBlock {
  /**
   * Auto detects destination from URL slug
   */
  dataSource: 'auto' | 'destination' | 'all';
  destination?: (string | null) | Destination;
  id?: string | null;
  blockName?: string | null;
  blockType: 'travelPackageExplorer';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicFormBlock".
 */
export interface DynamicFormBlock {
  /**
   * Where should form submissions be saved?
   */
  formType: 'review' | 'booking' | 'bulkBooking' | 'customTrip';
  /**
   * Form heading
   */
  title: string;
  /**
   * Optional description below heading
   */
  subtitle?: string | null;
  /**
   * Add custom fields to your form
   */
  fields: {
    /**
     * Field label shown to users
     */
    label: string;
    /**
     * Field name (used for data mapping)
     */
    name: string;
    /**
     * Field input type
     */
    type: 'text' | 'email' | 'tel' | 'number' | 'date' | 'textarea' | 'select' | 'checkbox';
    /**
     * Placeholder text (optional)
     */
    placeholder?: string | null;
    required?: boolean | null;
    /**
     * Options for select dropdown
     */
    options?:
      | {
          label: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Number of rows for textarea
     */
    rows?: number | null;
    /**
     * Field width in the form
     */
    width?: ('full' | 'half' | 'third') | null;
    id?: string | null;
  }[];
  /**
   * Submit button text
   */
  submitButtonText?: string | null;
  /**
   * Success message after submission
   */
  successMessage?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'dynamicForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings".
 */
export interface Booking {
  id: string;
  /**
   * Unique booking ID
   */
  bookingReference: string;
  user: string | User;
  package: string | Package;
  /**
   * Trip start date
   */
  startDate: string;
  /**
   * Trip end date
   */
  endDate?: string | null;
  /**
   * Date booking was made
   */
  bookingDate?: string | null;
  numberOfPeople: {
    adults: number;
    children?: number | null;
    infants?: number | null;
  };
  totalPrice: number;
  paidAmount?: number | null;
  currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
  paymentStatus?: ('pending' | 'partial' | 'completed' | 'refunded') | null;
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';
  contactDetails: {
    phone: string;
    email: string;
    address?: string | null;
  };
  /**
   * Customer special requests
   */
  specialRequests?: string | null;
  /**
   * Internal notes (not visible to customer)
   */
  internalNotes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bulk-booking-requests".
 */
export interface BulkBookingRequest {
  id: string;
  contactName: string;
  email: string;
  phone?: string | null;
  organization?: string | null;
  destination?: (string | null) | Destination;
  desiredStartDate?: string | null;
  desiredEndDate?: string | null;
  numPeople: number;
  message?: string | null;
  status?: ('new' | 'contacted' | 'closed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "custom-trip-requests".
 */
export interface CustomTripRequest {
  id: string;
  user?: (string | null) | User;
  destination?: (string | null) | Destination;
  budgetMin?: number | null;
  budgetMax?: number | null;
  numPeople: number;
  startDate?: string | null;
  endDate?: string | null;
  preferences?: string | null;
  source?: ('curate' | 'plan_my_trip') | null;
  status?: ('new' | 'in_progress' | 'quoted' | 'closed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favorites".
 */
export interface Favorite {
  id: string;
  user: string | User;
  target:
    | {
        relationTo: 'packages';
        value: string | Package;
      }
    | {
        relationTo: 'destinations';
        value: string | Destination;
      }
    | {
        relationTo: 'places';
        value: string | Place;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketing-banners".
 */
export interface MarketingBanner {
  id: string;
  /**
   * Banner headline (e.g., "UP TO 60% OFF")
   */
  title: string;
  /**
   * Supporting text
   */
  subtitle?: string | null;
  /**
   * Discount percentage to display
   */
  percentageOff?: number | null;
  /**
   * Banner background image
   */
  image: string | Media;
  /**
   * Button text (e.g., "Explore Packages")
   */
  ctaText?: string | null;
  /**
   * What the CTA button links to
   */
  ctaTarget?: ('package' | 'destination' | 'category' | 'url') | null;
  /**
   * Select the target item
   */
  ctaRef?:
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'destinations';
        value: string | Destination;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null);
  /**
   * Custom URL (e.g., /about-us)
   */
  ctaUrl?: string | null;
  /**
   * Where to show this banner
   */
  displayLocation?: ('homepage_hero' | 'homepage_secondary' | 'package_listing')[] | null;
  startDate?: string | null;
  endDate?: string | null;
  /**
   * Display order (lower = shown first)
   */
  sortOrder?: number | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions".
 */
export interface Promotion {
  id: string;
  /**
   * Promotion name (e.g., "Summer Sale 2025")
   */
  name: string;
  /**
   * Promotion details and terms
   */
  description?: string | null;
  /**
   * Badge text (e.g., "10% Off")
   */
  displayText?: string | null;
  discountType: 'percent' | 'amount';
  /**
   * 10 for 10% or ₹1000 for fixed amount
   */
  discountValue: number;
  /**
   * Maximum discount cap (for percentage discounts)
   */
  maxDiscountAmount?: number | null;
  /**
   * Badge color (hex code)
   */
  badgeColor?: string | null;
  startsAt?: string | null;
  endsAt?: string | null;
  /**
   * Optional promotional banner
   */
  bannerImage?: (string | null) | Media;
  /**
   * Specific packages this applies to (leave empty for all)
   */
  packages?: (string | Package)[] | null;
  /**
   * Categories this applies to
   */
  categories?: (string | Category)[] | null;
  /**
   * Destinations this applies to
   */
  destinations?: (string | Destination)[] | null;
  /**
   * Optional promo code (e.g., SUMMER2025)
   */
  code?: string | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  /**
   * Reviewer
   */
  user: string | User;
  /**
   * Package reviewed (optional)
   */
  package?: (string | null) | Package;
  /**
   * Destination reviewed (optional)
   */
  destination?: (string | null) | Destination;
  /**
   * Star rating (1-5)
   */
  rating: number;
  /**
   * Review headline
   */
  title: string;
  /**
   * Review content
   */
  body: string;
  photos?:
    | {
        image: string | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * When the trip took place
   */
  tripDate?: string | null;
  /**
   * Publish to show on frontend
   */
  published?: boolean | null;
  /**
   * Feature in "Client Stories" homepage section
   */
  isFeatured?: boolean | null;
  /**
   * Number of "helpful" votes
   */
  helpful?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage social media posts for Instagram carousel
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-posts".
 */
export interface SocialPost {
  id: string;
  platform: 'instagram' | 'facebook' | 'twitter';
  /**
   * Full Instagram post URL (e.g., https://www.instagram.com/p/ABC123...)
   */
  postUrl: string;
  /**
   * Optional caption or description
   */
  caption?: string | null;
  /**
   * Force show Instagram caption in the embed
   */
  showCaption?: boolean | null;
  /**
   * Optional fallback thumbnail
   */
  thumbnail?: (string | null) | Media;
  /**
   * Show in featured carousels
   */
  isFeatured?: boolean | null;
  /**
   * Display order in carousel
   */
  displayOrder?: number | null;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'package-categories';
        value: string | PackageCategory;
      } | null)
    | ({
        relationTo: 'destinations';
        value: string | Destination;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'accommodation-types';
        value: string | AccommodationType;
      } | null)
    | ({
        relationTo: 'activities';
        value: string | Activity;
      } | null)
    | ({
        relationTo: 'amenities';
        value: string | Amenity;
      } | null)
    | ({
        relationTo: 'bookings';
        value: string | Booking;
      } | null)
    | ({
        relationTo: 'bulk-booking-requests';
        value: string | BulkBookingRequest;
      } | null)
    | ({
        relationTo: 'cities';
        value: string | City;
      } | null)
    | ({
        relationTo: 'custom-trip-requests';
        value: string | CustomTripRequest;
      } | null)
    | ({
        relationTo: 'exclusions';
        value: string | Exclusion;
      } | null)
    | ({
        relationTo: 'favorites';
        value: string | Favorite;
      } | null)
    | ({
        relationTo: 'inclusions';
        value: string | Inclusion;
      } | null)
    | ({
        relationTo: 'marketing-banners';
        value: string | MarketingBanner;
      } | null)
    | ({
        relationTo: 'places';
        value: string | Place;
      } | null)
    | ({
        relationTo: 'promotions';
        value: string | Promotion;
      } | null)
    | ({
        relationTo: 'regions';
        value: string | Region;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'social-posts';
        value: string | SocialPost;
      } | null)
    | ({
        relationTo: 'vibes';
        value: string | Vibe;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?: T;
              categoryOptions?: T;
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              populateBy?: T;
              destination?: T;
              limit?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              timingSettings?:
                | T
                | {
                    autoplayDelay?: T;
                    transitionDuration?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        imageGrid?: T | ImageGridBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
        dynamicForm?: T | DynamicFormBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScrollerBlock_select".
 */
export interface DynamicScrollerBlockSelect<T extends boolean = true> {
  sections?:
    | T
    | {
        packageSection?: T | DynamicScroller_PackageSectionSelect<T>;
        destinationSection?: T | DynamicScroller_DestinationSectionSelect<T>;
        vibeSection?: T | DynamicScroller_VibeSectionSelect<T>;
        itinerarySection?: T | DynamicScroller_ItinerarySectionSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_PackageSection_select".
 */
export interface DynamicScroller_PackageSectionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  populatePackagesBy?: T;
  destinations?: T;
  vibes?: T;
  packageLimit?: T;
  manualItems?:
    | T
    | {
        title?: T;
        price?: T;
        image?: T;
        tag?: T;
        tagColor?: T;
        id?: T;
      };
  theme?:
    | T
    | {
        background?: T;
      };
  showNavigation?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_DestinationSection_select".
 */
export interface DynamicScroller_DestinationSectionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  populateDestinationsBy?: T;
  destinationLimit?: T;
  manualItems?:
    | T
    | {
        title?: T;
        price?: T;
        image?: T;
        tag?: T;
        tagColor?: T;
        id?: T;
      };
  theme?:
    | T
    | {
        background?: T;
      };
  showNavigation?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_VibeSection_select".
 */
export interface DynamicScroller_VibeSectionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  vibes?: T;
  packagesPerVibe?: T;
  theme?:
    | T
    | {
        background?: T;
      };
  showNavigation?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicScroller_ItinerarySection_select".
 */
export interface DynamicScroller_ItinerarySectionSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  itinerarySource?: T;
  manualDays?:
    | T
    | {
        day?: T;
        activities?:
          | T
          | {
              icon?: T;
              description?: T;
              detailsImage?: T;
              id?: T;
            };
        id?: T;
      };
  theme?:
    | T
    | {
        background?: T;
      };
  showNavigation?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopularNowBlock_select".
 */
export interface PopularNowBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  pauseOnHover?: T;
  rows?:
    | T
    | {
        dataSource?: T;
        itemLimit?: T;
        direction?: T;
        speedSeconds?: T;
        cards?:
          | T
          | {
              name?: T;
              price?: T;
              image?: T;
              alt?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UpDownCardCarouselBlock_select".
 */
export interface UpDownCardCarouselBlockSelect<T extends boolean = true> {
  dataSource?: T;
  itemLimit?: T;
  heading?: T;
  subheading?: T;
  cards?:
    | T
    | {
        name?: T;
        details?: T;
        price?: T;
        discount?: T;
        image?: T;
        imageUrl?: T;
        alt?: T;
        href?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientStoriesBlock_select".
 */
export interface ClientStoriesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  buttonText?: T;
  background?: T;
  backgroundUrl?: T;
  overlay?: T;
  cardsPerView?: T;
  gapPx?: T;
  populateBy?: T;
  limit?: T;
  cards?:
    | T
    | {
        name?: T;
        rating?: T;
        story?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstagramCarouselBlock_select".
 */
export interface InstagramCarouselBlockSelect<T extends boolean = true> {
  dataSource?: T;
  postLimit?: T;
  posts?:
    | T
    | {
        url?: T;
        captioned?: T;
        id?: T;
      };
  heading?: T;
  profile?:
    | T
    | {
        handle?: T;
        profileUrl?: T;
        followLabel?: T;
        avatarUrl?: T;
      };
  layout?:
    | T
    | {
        columnsDesktop?: T;
        columnsTablet?: T;
        columnsMobile?: T;
        gutter?: T;
        showCaptions?: T;
      };
  caption?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGridBlock_select".
 */
export interface ImageGridBlockSelect<T extends boolean = true> {
  dataSource?: T;
  destination?: T;
  package?: T;
  featuredLimit?: T;
  manualData?:
    | T
    | {
        leftHero?:
          | T
          | {
              title?: T;
              rating?: T;
              trail?: T;
              image?: T;
            };
        explore?:
          | T
          | {
              subtitle?: T;
              title?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
            };
        spots?:
          | T
          | {
              name?: T;
              rating?: T;
              location?: T;
              image?: T;
              id?: T;
            };
        activities?:
          | T
          | {
              subtitle?: T;
              title?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              tag?: T;
              image?: T;
            };
      };
  labels?:
    | T
    | {
        ratingPrefix?: T;
      };
  theme?:
    | T
    | {
        dark?: T;
        container?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelPackageExplorerBlock_select".
 */
export interface TravelPackageExplorerBlockSelect<T extends boolean = true> {
  dataSource?: T;
  destination?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DynamicFormBlock_select".
 */
export interface DynamicFormBlockSelect<T extends boolean = true> {
  formType?: T;
  title?: T;
  subtitle?: T;
  fields?:
    | T
    | {
        label?: T;
        name?: T;
        type?: T;
        placeholder?: T;
        required?: T;
        options?:
          | T
          | {
              label?: T;
              value?: T;
              id?: T;
            };
        rows?: T;
        width?: T;
        id?: T;
      };
  submitButtonText?: T;
  successMessage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  slug?: T;
  description?: T;
  parent?: T;
  icon?: T;
  color?: T;
  displayOrder?: T;
  isActive?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  phone?: T;
  marketingOptIn?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "package-categories_select".
 */
export interface PackageCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  type?: T;
  parent?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations_select".
 */
export interface DestinationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  shortDescription?: T;
  description?: T;
  featuredImage?: T;
  coverImage?: T;
  gallery?: T;
  heroData?:
    | T
    | {
        tagline?: T;
        elevation?: T;
        heroBackgroundPattern?: T;
      };
  region?: T;
  country?: T;
  continent?: T;
  cities?: T;
  places?: T;
  startingPrice?: T;
  currency?: T;
  discount?:
    | T
    | {
        hasDiscount?: T;
        percentage?: T;
        label?: T;
      };
  locationDetails?: T;
  packageCount?: T;
  isFeatured?: T;
  isPopular?: T;
  isInSeason?: T;
  categories?: T;
  vibes?: T;
  popularityScore?: T;
  displayOrder?: T;
  highlights?:
    | T
    | {
        text?: T;
        id?: T;
      };
  bestTimeToVisit?: T;
  languages?: T;
  timezone?: T;
  latitude?: T;
  longitude?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  tagline?: T;
  summary?: T;
  description?: T;
  heroImage?: T;
  gallery?: T;
  destinations?: T;
  route?:
    | T
    | {
        city?: T;
        nights?: T;
        order?: T;
        id?: T;
      };
  duration?: T;
  price?: T;
  currency?: T;
  discountedPrice?: T;
  starRating?: T;
  itinerary?:
    | T
    | {
        dayNumber?: T;
        day?: T;
        activities?:
          | T
          | {
              icon?: T;
              description?: T;
              detailsImage?: T;
              id?: T;
            };
        title?: T;
        subtitle?: T;
        description?: T;
        city?: T;
        places?: T;
        mealsIncluded?:
          | T
          | {
              breakfast?: T;
              lunch?: T;
              dinner?: T;
            };
        image?: T;
        notes?: T;
        id?: T;
      };
  highlights?:
    | T
    | {
        icon?: T;
        text?: T;
        id?: T;
      };
  inclusions?: T;
  exclusions?: T;
  goodToKnow?:
    | T
    | {
        title?: T;
        text?: T;
        id?: T;
      };
  labels?: T;
  categories?: T;
  activities?: T;
  amenities?: T;
  accommodationTypes?: T;
  vibe?: T;
  rating?: T;
  bookingsCount30d?: T;
  isFeatured?: T;
  isFamilyFriendly?: T;
  isHoneymoon?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodation-types_select".
 */
export interface AccommodationTypesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities_select".
 */
export interface AmenitiesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings_select".
 */
export interface BookingsSelect<T extends boolean = true> {
  bookingReference?: T;
  user?: T;
  package?: T;
  startDate?: T;
  endDate?: T;
  bookingDate?: T;
  numberOfPeople?:
    | T
    | {
        adults?: T;
        children?: T;
        infants?: T;
      };
  totalPrice?: T;
  paidAmount?: T;
  currency?: T;
  paymentStatus?: T;
  status?: T;
  contactDetails?:
    | T
    | {
        phone?: T;
        email?: T;
        address?: T;
      };
  specialRequests?: T;
  internalNotes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bulk-booking-requests_select".
 */
export interface BulkBookingRequestsSelect<T extends boolean = true> {
  contactName?: T;
  email?: T;
  phone?: T;
  organization?: T;
  destination?: T;
  desiredStartDate?: T;
  desiredEndDate?: T;
  numPeople?: T;
  message?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  destination?: T;
  heroImage?: T;
  description?: T;
  featuredImage?: T;
  latitude?: T;
  longitude?: T;
  displayOrder?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "custom-trip-requests_select".
 */
export interface CustomTripRequestsSelect<T extends boolean = true> {
  user?: T;
  destination?: T;
  budgetMin?: T;
  budgetMax?: T;
  numPeople?: T;
  startDate?: T;
  endDate?: T;
  preferences?: T;
  source?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exclusions_select".
 */
export interface ExclusionsSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  category?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favorites_select".
 */
export interface FavoritesSelect<T extends boolean = true> {
  user?: T;
  target?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inclusions_select".
 */
export interface InclusionsSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  category?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketing-banners_select".
 */
export interface MarketingBannersSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  percentageOff?: T;
  image?: T;
  ctaText?: T;
  ctaTarget?: T;
  ctaRef?: T;
  ctaUrl?: T;
  displayLocation?: T;
  startDate?: T;
  endDate?: T;
  sortOrder?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places_select".
 */
export interface PlacesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  shortDescription?: T;
  description?: T;
  image?: T;
  gallery?: T;
  destination?: T;
  city?: T;
  category?: T;
  latitude?: T;
  longitude?: T;
  displayOrder?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions_select".
 */
export interface PromotionsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  displayText?: T;
  discountType?: T;
  discountValue?: T;
  maxDiscountAmount?: T;
  badgeColor?: T;
  startsAt?: T;
  endsAt?: T;
  bannerImage?: T;
  packages?: T;
  categories?: T;
  destinations?: T;
  code?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
  name?: T;
  destination?: T;
  type?: T;
  description?: T;
  code?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  user?: T;
  package?: T;
  destination?: T;
  rating?: T;
  title?: T;
  body?: T;
  photos?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  tripDate?: T;
  published?: T;
  isFeatured?: T;
  helpful?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-posts_select".
 */
export interface SocialPostsSelect<T extends boolean = true> {
  platform?: T;
  postUrl?: T;
  caption?: T;
  showCaption?: T;
  thumbnail?: T;
  isFeatured?: T;
  displayOrder?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vibes_select".
 */
export interface VibesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  icon?: T;
  color?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo: string | Media;
  navItems?:
    | {
        label: string;
        href: string;
        id?: string | null;
      }[]
    | null;
  curateButton?: {
    show?: boolean | null;
    text?: string | null;
    href?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Upload your logo for the footer (optional)
   */
  logo?: (string | null) | Media;
  /**
   * Brief description or tagline displayed under the logo
   */
  description?: string | null;
  /**
   * Used when Nav Groups are not defined. Define Quick Links here.
   */
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Create organized footer columns (recommended: 3-4 columns). Each group becomes a column.
   */
  navGroups?:
    | {
        /**
         * e.g., "Company", "Resources", "Support"
         */
        groupLabel: string;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Add your social media profiles. Use the label for the platform name (e.g., "Facebook", "Instagram")
   */
  socialLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Add legal pages like Privacy Policy, Terms of Service, Cookie Policy, etc.
   */
  legalLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Enable/disable the dark/light theme toggle
   */
  showThemeSelector?: boolean | null;
  /**
   * Copyright notice displayed at the bottom of the footer
   */
  copyright: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-filters".
 */
export interface SearchFilter {
  id: string;
  /**
   * Featured destinations in search dropdown
   */
  destinations?: (string | Destination)[] | null;
  /**
   * Categories shown in search filter
   */
  categories?: (string | PackageCategory)[] | null;
  priceRanges?:
    | {
        /**
         * Display label (e.g., "₹2,500 - ₹5,000")
         */
        label: string;
        min?: number | null;
        max?: number | null;
        id?: string | null;
      }[]
    | null;
  durationRanges?:
    | {
        label: string;
        minDays?: number | null;
        maxDays?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packageLayout".
 */
export interface PackageLayout {
  id: string;
  hero: {
    type: 'none' | 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with transparent background
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds
       */
      transitionDuration?: number | null;
      /**
       * Destinations to show in search dropdown
       */
      destinationOptions?: (string | Destination)[] | null;
      /**
       * Package categories for search
       */
      categoryOptions?: (string | PackageCategory)[] | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    /**
     * ⚡ Destination will be auto-detected from URL slug
     */
    destinationHeroFields?: {
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    /**
     * ⚡ Package will be auto-detected from URL slug
     */
    packageHeroFields?: {
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title. Use {slug} for auto-replacement (e.g., "Things to do in {slug}" → "Things to do in Spain")
         */
        title: string;
        /**
         * How to populate attractions
         */
        populateBy?: ('auto' | 'destination' | 'manual') | null;
        /**
         * Select destination to show its places
         */
        destination?: (string | null) | Destination;
        /**
         * Number of places to show
         */
        limit?: number | null;
        stops?:
          | {
              name: string;
              city: string;
              image: string | Media;
              excerpt: string;
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        timingSettings: {
          /**
           * Auto-scroll delay in milliseconds
           */
          autoplayDelay: number;
          /**
           * Transition duration in milliseconds
           */
          transitionDuration: number;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | TravelPackageExplorerBlock
    | PackageHighlightsBlock
    | FeatureCarouselBlock
    | InfoPanelBlock
    | ImageGridBlock
  )[];
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackageHighlightsBlock".
 */
export interface PackageHighlightsBlock {
  /**
   * Choose where to load highlights from
   */
  dataSource: 'manual' | 'auto' | 'package';
  /**
   * Select a specific package
   */
  package?: (string | null) | Package;
  /**
   * Main heading for the highlights section
   */
  heading?: string | null;
  /**
   * Subtitle text below the heading
   */
  subheading?: string | null;
  /**
   * List of package highlights (each with a star icon)
   */
  highlights?:
    | {
        highlightText: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Exactly 7 images for the gallery mosaic layout
   */
  galleryImages?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'packageHighlights';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureCarouselBlock".
 */
export interface FeatureCarouselBlock {
  /**
   * Main heading displayed at the top of the carousel.
   */
  heading: string;
  /**
   * Optional subheading displayed below the main heading.
   */
  subheading?: string | null;
  /**
   * Add feature cards to display in the scrollable carousel.
   */
  cards: {
    title: string;
    description: string;
    id?: string | null;
  }[];
  /**
   * Display left/right navigation buttons for manual scrolling.
   */
  showNavigationButtons?: boolean | null;
  /**
   * Percentage of container width to scroll on button click (10-100).
   */
  scrollPercentage?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoPanelBlock".
 */
export interface InfoPanelBlock {
  dataSource: 'manual' | 'auto' | 'package';
  package?: (string | null) | Package;
  panelType?: ('goodToKnow' | 'inclusions' | 'exclusions') | null;
  title?: string | null;
  subheading?: string | null;
  listType?: ('disc' | 'decimal') | null;
  items?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoPanel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinationLayout".
 */
export interface DestinationLayout {
  id: string;
  hero: {
    type: 'none' | 'mainHero' | 'destinationHero' | 'packageHero';
    mainHeroFields?: {
      slides: {
        /**
         * The main background image for the slide
         */
        backgroundImage: string | Media;
        headline: string;
        subtitle?: string | null;
        location?: string | null;
        id?: string | null;
      }[];
      /**
       * Upload a PNG image of clouds with transparent background
       */
      cloudImage: string | Media;
      enableAirplaneAnimation?: boolean | null;
      /**
       * Autoplay interval in milliseconds
       */
      autoplayDuration?: number | null;
      /**
       * Slide transition duration in milliseconds
       */
      transitionDuration?: number | null;
      /**
       * Destinations to show in search dropdown
       */
      destinationOptions?: (string | Destination)[] | null;
      /**
       * Package categories for search
       */
      categoryOptions?: (string | PackageCategory)[] | null;
      buttonLabel?: string | null;
      placeholders?: {
        destination?: string | null;
        date?: string | null;
        people?: string | null;
        category?: string | null;
      };
    };
    /**
     * ⚡ Destination will be auto-detected from URL slug
     */
    destinationHeroFields?: {
      /**
       * Time in milliseconds between automatic slide changes
       */
      autoplayInterval?: number | null;
    };
    /**
     * ⚡ Package will be auto-detected from URL slug
     */
    packageHeroFields?: {
      buttons?: {
        bookNowLabel?: string | null;
        enableDownload?: boolean | null;
      };
    };
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | DynamicScrollerBlock
    | PopularNowBlock
    | {
        /**
         * Main title for the carousel section
         */
        title?: string | null;
        /**
         * Subtitle text below the main title
         */
        subtitle?: string | null;
        /**
         * Select destinations to display in the carousel
         */
        destinations?: (string | Destination)[] | null;
        showNavigation?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'uniformCardCarousel';
      }
    | {
        /**
         * Select the image to display
         */
        image: string | Media;
        /**
         * Add a dark overlay on top of the image
         */
        overlay?: boolean | null;
        /**
         * Adjust darkness of overlay (0 = transparent, 1 = fully black)
         */
        overlayOpacity?: number | null;
        /**
         * Choose the height of the image block
         */
        height?: ('small' | 'medium' | 'large' | 'xl') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'staticImageBlock';
      }
    | {
        title?: string | null;
        subtitle?: string | null;
        /**
         * Select destinations - they will automatically get varied card sizes
         */
        destinations?: (string | Destination)[] | null;
        showDiscountBadge?: boolean | null;
        showLocationDetails?: boolean | null;
        /**
         * How to distribute different card sizes
         */
        cardSizePattern?: ('varied' | 'pattern' | 'random') | null;
        backgroundColor?: ('gray' | 'white' | 'cream') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'nonUniformCardCarousel';
      }
    | UpDownCardCarouselBlock
    | ClientStoriesBlock
    | {
        /**
         * Main title. Use {slug} for auto-replacement (e.g., "Things to do in {slug}" → "Things to do in Spain")
         */
        title: string;
        /**
         * How to populate attractions
         */
        populateBy?: ('auto' | 'destination' | 'manual') | null;
        /**
         * Select destination to show its places
         */
        destination?: (string | null) | Destination;
        /**
         * Number of places to show
         */
        limit?: number | null;
        stops?:
          | {
              name: string;
              city: string;
              image: string | Media;
              excerpt: string;
              slug?: string | null;
              id?: string | null;
            }[]
          | null;
        timingSettings: {
          /**
           * Auto-scroll delay in milliseconds
           */
          autoplayDelay: number;
          /**
           * Transition duration in milliseconds
           */
          transitionDuration: number;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'destinationHeroCarousel';
      }
    | InstagramCarouselBlock
    | TravelPackageExplorerBlock
    | PackageHighlightsBlock
    | FeatureCarouselBlock
    | InfoPanelBlock
    | ImageGridBlock
  )[];
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        label?: T;
        href?: T;
        id?: T;
      };
  curateButton?:
    | T
    | {
        show?: T;
        text?: T;
        href?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  description?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  navGroups?:
    | T
    | {
        groupLabel?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  legalLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  showThemeSelector?: T;
  copyright?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-filters_select".
 */
export interface SearchFiltersSelect<T extends boolean = true> {
  destinations?: T;
  categories?: T;
  priceRanges?:
    | T
    | {
        label?: T;
        min?: T;
        max?: T;
        id?: T;
      };
  durationRanges?:
    | T
    | {
        label?: T;
        minDays?: T;
        maxDays?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packageLayout_select".
 */
export interface PackageLayoutSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?: T;
              categoryOptions?: T;
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              populateBy?: T;
              destination?: T;
              limit?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              timingSettings?:
                | T
                | {
                    autoplayDelay?: T;
                    transitionDuration?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
        packageHighlights?: T | PackageHighlightsBlockSelect<T>;
        featureCarousel?: T | FeatureCarouselBlockSelect<T>;
        infoPanel?: T | InfoPanelBlockSelect<T>;
        imageGrid?: T | ImageGridBlockSelect<T>;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackageHighlightsBlock_select".
 */
export interface PackageHighlightsBlockSelect<T extends boolean = true> {
  dataSource?: T;
  package?: T;
  heading?: T;
  subheading?: T;
  highlights?:
    | T
    | {
        highlightText?: T;
        id?: T;
      };
  galleryImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureCarouselBlock_select".
 */
export interface FeatureCarouselBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  cards?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  showNavigationButtons?: T;
  scrollPercentage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoPanelBlock_select".
 */
export interface InfoPanelBlockSelect<T extends boolean = true> {
  dataSource?: T;
  package?: T;
  panelType?: T;
  title?: T;
  subheading?: T;
  listType?: T;
  items?:
    | T
    | {
        text?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinationLayout_select".
 */
export interface DestinationLayoutSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        type?: T;
        mainHeroFields?:
          | T
          | {
              slides?:
                | T
                | {
                    backgroundImage?: T;
                    headline?: T;
                    subtitle?: T;
                    location?: T;
                    id?: T;
                  };
              cloudImage?: T;
              enableAirplaneAnimation?: T;
              autoplayDuration?: T;
              transitionDuration?: T;
              destinationOptions?: T;
              categoryOptions?: T;
              buttonLabel?: T;
              placeholders?:
                | T
                | {
                    destination?: T;
                    date?: T;
                    people?: T;
                    category?: T;
                  };
            };
        destinationHeroFields?:
          | T
          | {
              autoplayInterval?: T;
            };
        packageHeroFields?:
          | T
          | {
              buttons?:
                | T
                | {
                    bookNowLabel?: T;
                    enableDownload?: T;
                  };
            };
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        dynamicScroller?: T | DynamicScrollerBlockSelect<T>;
        popularNow?: T | PopularNowBlockSelect<T>;
        uniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showNavigation?: T;
              id?: T;
              blockName?: T;
            };
        staticImageBlock?:
          | T
          | {
              image?: T;
              overlay?: T;
              overlayOpacity?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        nonUniformCardCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              destinations?: T;
              showDiscountBadge?: T;
              showLocationDetails?: T;
              cardSizePattern?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        upDownCardCarousel?: T | UpDownCardCarouselBlockSelect<T>;
        clientStories?: T | ClientStoriesBlockSelect<T>;
        destinationHeroCarousel?:
          | T
          | {
              title?: T;
              populateBy?: T;
              destination?: T;
              limit?: T;
              stops?:
                | T
                | {
                    name?: T;
                    city?: T;
                    image?: T;
                    excerpt?: T;
                    slug?: T;
                    id?: T;
                  };
              timingSettings?:
                | T
                | {
                    autoplayDelay?: T;
                    transitionDuration?: T;
                  };
              id?: T;
              blockName?: T;
            };
        instagramCarousel?: T | InstagramCarouselBlockSelect<T>;
        travelPackageExplorer?: T | TravelPackageExplorerBlockSelect<T>;
        packageHighlights?: T | PackageHighlightsBlockSelect<T>;
        featureCarousel?: T | FeatureCarouselBlockSelect<T>;
        infoPanel?: T | InfoPanelBlockSelect<T>;
        imageGrid?: T | ImageGridBlockSelect<T>;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}